//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.11.05 at 02:48:15 PM CET 
//


package eu.datex2.schema._2._2_0;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for GeneralDayTypeEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="GeneralDayTypeEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="bicycleRaceDay"/>
 *     &lt;enumeration value="bullFightDay"/>
 *     &lt;enumeration value="carnivalDay"/>
 *     &lt;enumeration value="exhibitionDay"/>
 *     &lt;enumeration value="festivalDay"/>
 *     &lt;enumeration value="gamesDay"/>
 *     &lt;enumeration value="horseRaceMeetingDay"/>
 *     &lt;enumeration value="huntMeetingDay"/>
 *     &lt;enumeration value="marathonRaceDay"/>
 *     &lt;enumeration value="marketDay"/>
 *     &lt;enumeration value="motorSportRaceMeetingDay"/>
 *     &lt;enumeration value="nonWorkingDay"/>
 *     &lt;enumeration value="raceMeetingDay"/>
 *     &lt;enumeration value="regattaDay"/>
 *     &lt;enumeration value="showDay"/>
 *     &lt;enumeration value="sportsMeetingDay"/>
 *     &lt;enumeration value="workingDay"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "GeneralDayTypeEnum")
@XmlEnum
public enum GeneralDayTypeEnum {


    /**
     * Day of local bicycle race.
     * 
     */
    @XmlEnumValue("bicycleRaceDay")
    BICYCLE_RACE_DAY("bicycleRaceDay"),

    /**
     * Day of local bull fight.
     * 
     */
    @XmlEnumValue("bullFightDay")
    BULL_FIGHT_DAY("bullFightDay"),

    /**
     * Day of a local carnival involving a procession along roads.
     * 
     */
    @XmlEnumValue("carnivalDay")
    CARNIVAL_DAY("carnivalDay"),

    /**
     * Day of a local exhibition.
     * 
     */
    @XmlEnumValue("exhibitionDay")
    EXHIBITION_DAY("exhibitionDay"),

    /**
     * Day of a local festival.
     * 
     */
    @XmlEnumValue("festivalDay")
    FESTIVAL_DAY("festivalDay"),

    /**
     * Day of local games (e.g. highland games in Scotland).
     * 
     */
    @XmlEnumValue("gamesDay")
    GAMES_DAY("gamesDay"),

    /**
     * Day of a local horse race meeting.
     * 
     */
    @XmlEnumValue("horseRaceMeetingDay")
    HORSE_RACE_MEETING_DAY("horseRaceMeetingDay"),

    /**
     * Day of a local hunt meeting.
     * 
     */
    @XmlEnumValue("huntMeetingDay")
    HUNT_MEETING_DAY("huntMeetingDay"),

    /**
     * Day of local marathon race.
     * 
     */
    @XmlEnumValue("marathonRaceDay")
    MARATHON_RACE_DAY("marathonRaceDay"),

    /**
     * Day of a local market.
     * 
     */
    @XmlEnumValue("marketDay")
    MARKET_DAY("marketDay"),

    /**
     * Day of a local motor sport race meeting.
     * 
     */
    @XmlEnumValue("motorSportRaceMeetingDay")
    MOTOR_SPORT_RACE_MEETING_DAY("motorSportRaceMeetingDay"),

    /**
     * A non working day in the specific country/region.
     * 
     */
    @XmlEnumValue("nonWorkingDay")
    NON_WORKING_DAY("nonWorkingDay"),

    /**
     * Day of a local race meeting (other than horse or motor sport).
     * 
     */
    @XmlEnumValue("raceMeetingDay")
    RACE_MEETING_DAY("raceMeetingDay"),

    /**
     * Day of a local regatta.
     * 
     */
    @XmlEnumValue("regattaDay")
    REGATTA_DAY("regattaDay"),

    /**
     * Day of a local show.
     * 
     */
    @XmlEnumValue("showDay")
    SHOW_DAY("showDay"),

    /**
     * Day of a local sports meeting.
     * 
     */
    @XmlEnumValue("sportsMeetingDay")
    SPORTS_MEETING_DAY("sportsMeetingDay"),

    /**
     * A working day in the specific country/region.
     * 
     */
    @XmlEnumValue("workingDay")
    WORKING_DAY("workingDay");
    private final String value;

    GeneralDayTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static GeneralDayTypeEnum fromValue(String v) {
        for (GeneralDayTypeEnum c: GeneralDayTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
